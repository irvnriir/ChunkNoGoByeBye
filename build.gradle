buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
  id 'net.minecrell.licenser' version '0.3'
  id 'org.ajoberstar.grgit' version '2.3.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext {
    MC_VERSION = '1.14.4'
    FORGE_VERSION = '28.1.0'
    MY_VERSION = '1-acsDelay'
    MODID = 'chunknogobyebye-Xrud'
    changelog = rootProject.file('build/changelog.txt')
}

version = "${MC_VERSION}-${MY_VERSION}"
group = 'net.minecraftforge.lex'
archivesBaseName = 'ChunkNoGoByeBye-Xrud'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                chunknogobyebye {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            mods {
                chunknogobyebye {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', MODID, '--all', '--output', file('src/generated/resources/')

            mods {
                chunknogobyebye {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${MC_VERSION}-${FORGE_VERSION}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            'Specification-Title'     : 'ChunkNoGoByeBye',
            'Specification-Vendor'    : 'LexManos',
            'Specification-Version'   : MY_VERSION,
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : version,
            'Implementation-Vendor'   : 'LexManos',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

license {
  header project.file('LICENSE-header.txt')
  include 'net/minecraftforge/lex/**/*.java'
  newLine false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from(jar.manifest)
}

jar.finalizedBy('reobfJar')

artifacts {
    archives jar
    archives sourcesJar
    if (changelog.exists())
        archives changelog
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            if (changelog.exists()) {
                artifact(changelog){
                    classifier 'changelog'
                }
            }
            pom {
                name = project.archivesBaseName
                packaging = 'jar'
                description = 'Simple chunk loader using vanilla forceload mechanics.'
                url = 'https://github.com/LexManos/ChunkNoGoByeBye'

                scm {
                    url = 'https://github.com/LexManos/ChunkNoGoByeBye'
                    connection = 'scm:git:git://github.com/LexManos/ChunkNoGoByeBye.git'
                    developerConnection = 'scm:git:git@github.com:LexManos/ChunkNoGoByeBye.git'
                }

                issueManagement {
                    system = 'github'
                    url = 'https://github.com/LexManos/ChunkNoGoByeBye/issues'
                }

                developers {
                    developer {
                        id = 'LexManos'
                        name = 'Lex Manos'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.hasProperty('forgeMavenPassword')) {
                credentials {
                    username project.properties.forgeMavenUser
                    password project.properties.forgeMavenPassword
                }
                url 'https://files.minecraftforge.net/maven/manage/upload'
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}


// def gitVersion() {
//     def raw = grgit.describe(longDescr: true)
//     def desc = (raw == null ? 'unknown-offset-hash' : grgit.describe(longDescr: true)).split('-') as List
//     def hash = desc.remove(desc.size() - 1)
//     def offset = desc.remove(desc.size() - 1)
//     def tag = desc.join('-')
//     def branch = grgit.branch.current().name
//     project.ext.SPEC_VERSION = tag
//     return "${tag}.${offset}" //${t -> if (branch != 'master') t << '-' + branch}"
// }